# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: helloworld.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
from . import helloworld


class GreeterBase(abc.ABC):

    @abc.abstractmethod
    async def say_hello(self, stream: 'grpclib.server.Stream[helloworld.HelloRequest, helloworld.HelloReply]') -> None:
        pass

    @abc.abstractmethod
    async def say_hello_stream(self, stream: 'grpclib.server.Stream[helloworld.HelloRequest, helloworld.HelloStreamReply]') -> None:
        pass

    @abc.abstractmethod
    async def say_hello_nested(self, stream: 'grpclib.server.Stream[helloworld.HelloRequest, helloworld.HelloNestedReply]') -> None:
        pass

    @abc.abstractmethod
    async def get_some_collection(self, stream: 'grpclib.server.Stream[helloworld.SomeRequest, helloworld.SomeCollection]') -> None:
        pass

    @abc.abstractmethod
    async def get_some_stream(self, stream: 'grpclib.server.Stream[helloworld.SomeRequest, helloworld.SomeRecord]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/helloworld.Greeter/say_hello': grpclib.const.Handler(
                self.say_hello,
                grpclib.const.Cardinality.UNARY_UNARY,
                helloworld.HelloRequest,
                helloworld.HelloReply,
            ),
            '/helloworld.Greeter/say_hello_stream': grpclib.const.Handler(
                self.say_hello_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                helloworld.HelloRequest,
                helloworld.HelloStreamReply,
            ),
            '/helloworld.Greeter/say_hello_nested': grpclib.const.Handler(
                self.say_hello_nested,
                grpclib.const.Cardinality.UNARY_UNARY,
                helloworld.HelloRequest,
                helloworld.HelloNestedReply,
            ),
            '/helloworld.Greeter/get_some_collection': grpclib.const.Handler(
                self.get_some_collection,
                grpclib.const.Cardinality.UNARY_UNARY,
                helloworld.SomeRequest,
                helloworld.SomeCollection,
            ),
            '/helloworld.Greeter/get_some_stream': grpclib.const.Handler(
                self.get_some_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                helloworld.SomeRequest,
                helloworld.SomeRecord,
            ),
        }


class GreeterStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.say_hello = grpclib.client.UnaryUnaryMethod(
            channel,
            '/helloworld.Greeter/say_hello',
            helloworld.HelloRequest,
            helloworld.HelloReply,
        )
        self.say_hello_stream = grpclib.client.UnaryStreamMethod(
            channel,
            '/helloworld.Greeter/say_hello_stream',
            helloworld.HelloRequest,
            helloworld.HelloStreamReply,
        )
        self.say_hello_nested = grpclib.client.UnaryUnaryMethod(
            channel,
            '/helloworld.Greeter/say_hello_nested',
            helloworld.HelloRequest,
            helloworld.HelloNestedReply,
        )
        self.get_some_collection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/helloworld.Greeter/get_some_collection',
            helloworld.SomeRequest,
            helloworld.SomeCollection,
        )
        self.get_some_stream = grpclib.client.UnaryStreamMethod(
            channel,
            '/helloworld.Greeter/get_some_stream',
            helloworld.SomeRequest,
            helloworld.SomeRecord,
        )
