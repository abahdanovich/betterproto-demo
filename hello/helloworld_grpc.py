# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: helloworld.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
from . import helloworld as helloworld_pb2


class GreeterBase(abc.ABC):

    @abc.abstractmethod
    async def SayHello(self, stream: 'grpclib.server.Stream[helloworld_pb2.HelloRequest, helloworld_pb2.HelloReply]') -> None:
        pass

    @abc.abstractmethod
    async def SayHelloStream(self, stream: 'grpclib.server.Stream[helloworld_pb2.HelloRequest, helloworld_pb2.HelloStreamReply]') -> None:
        pass

    @abc.abstractmethod
    async def SayHelloNested(self, stream: 'grpclib.server.Stream[helloworld_pb2.HelloRequest, helloworld_pb2.HelloNestedReply]') -> None:
        pass

    @abc.abstractmethod
    async def GetSomeCollection(self, stream: 'grpclib.server.Stream[helloworld_pb2.SomeRequest, helloworld_pb2.SomeCollection]') -> None:
        pass

    @abc.abstractmethod
    async def GetSomeStream(self, stream: 'grpclib.server.Stream[helloworld_pb2.SomeRequest, helloworld_pb2.SomeRecord]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/helloworld.Greeter/SayHello': grpclib.const.Handler(
                self.SayHello,
                grpclib.const.Cardinality.UNARY_UNARY,
                helloworld_pb2.HelloRequest,
                helloworld_pb2.HelloReply,
            ),
            '/helloworld.Greeter/SayHelloStream': grpclib.const.Handler(
                self.SayHelloStream,
                grpclib.const.Cardinality.UNARY_STREAM,
                helloworld_pb2.HelloRequest,
                helloworld_pb2.HelloStreamReply,
            ),
            '/helloworld.Greeter/SayHelloNested': grpclib.const.Handler(
                self.SayHelloNested,
                grpclib.const.Cardinality.UNARY_UNARY,
                helloworld_pb2.HelloRequest,
                helloworld_pb2.HelloNestedReply,
            ),
            '/helloworld.Greeter/GetSomeCollection': grpclib.const.Handler(
                self.GetSomeCollection,
                grpclib.const.Cardinality.UNARY_UNARY,
                helloworld_pb2.SomeRequest,
                helloworld_pb2.SomeCollection,
            ),
            '/helloworld.Greeter/GetSomeStream': grpclib.const.Handler(
                self.GetSomeStream,
                grpclib.const.Cardinality.UNARY_STREAM,
                helloworld_pb2.SomeRequest,
                helloworld_pb2.SomeRecord,
            ),
        }


class GreeterStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.SayHello = grpclib.client.UnaryUnaryMethod(
            channel,
            '/helloworld.Greeter/SayHello',
            helloworld_pb2.HelloRequest,
            helloworld_pb2.HelloReply,
        )
        self.SayHelloStream = grpclib.client.UnaryStreamMethod(
            channel,
            '/helloworld.Greeter/SayHelloStream',
            helloworld_pb2.HelloRequest,
            helloworld_pb2.HelloStreamReply,
        )
        self.SayHelloNested = grpclib.client.UnaryUnaryMethod(
            channel,
            '/helloworld.Greeter/SayHelloNested',
            helloworld_pb2.HelloRequest,
            helloworld_pb2.HelloNestedReply,
        )
        self.GetSomeCollection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/helloworld.Greeter/GetSomeCollection',
            helloworld_pb2.SomeRequest,
            helloworld_pb2.SomeCollection,
        )
        self.GetSomeStream = grpclib.client.UnaryStreamMethod(
            channel,
            '/helloworld.Greeter/GetSomeStream',
            helloworld_pb2.SomeRequest,
            helloworld_pb2.SomeRecord,
        )
